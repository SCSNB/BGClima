name: Build and Deploy

on:
  push:
    branches:
      - main
	  - hyper-inverters
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.build_status.outputs.success }}
    
    steps:
      # 1️⃣ Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # 3️⃣ Setup Node.js for Angular
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 4️⃣ Install Angular dependencies & build
      - name: Install Angular dependencies
        working-directory: ./BGClima.UI
        run: npm install

      - name: Build Angular app
        working-directory: ./BGClima.UI
        run: |
          npm run build -- --configuration production
          ls -la ./dist/

      # 5️⃣ Copy Angular dist to .NET wwwroot
      - name: Copy Angular build to API wwwroot
        run: |
          echo "Copying Angular dist into API..."
          rm -rf ./BGClima.API/wwwroot/*
          cp -r ./BGClima.UI/dist/bgclima.ui/* ./BGClima.API/wwwroot/

      # 6️⃣ Restore & build .NET API
      - name: Restore .NET dependencies
        working-directory: ./BGClima.API
        run: dotnet restore

      - name: Build .NET API
        working-directory: ./BGClima.API
        run: dotnet build --no-restore --configuration Release

      # 7️⃣ Publish .NET API
      - name: Publish .NET API
        working-directory: ./BGClima.API
        run: dotnet publish -c Release -o ${{ github.workspace }}/publish

      # 8️⃣ Upload artifact for next job
      - name: Upload published app
        uses: actions/upload-artifact@v3
        with:
          name: published-app
          path: ${{ github.workspace }}/publish

      # Mark success
      - name: Set build status
        id: build_status
        run: echo "success=true" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    if: needs.build.outputs.build_success == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 1️⃣ Download published app
      - name: Download published app
        uses: actions/download-artifact@v3
        with:
          name: published-app
          path: ./publish

      # 2️⃣ Install Fly.io CLI
      - name: Install Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      # 3️⃣ Deploy with Flyctl (from publish folder)
      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only --local-only --path ./publish
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
